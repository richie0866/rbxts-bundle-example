local ENV = os.getenv("ENV")
local SOURCE_PATH = ENV == "production" and "dist/main.lua" or "dist/main-dev.lua"
local MODULE_TYPE = ENV == "production" and "callback" or "loadstring"

local DARKLUA_CONFIG = "ci/darklua.json"
local TEMP_FILE = "dist/temp.lua"
local MODEL_PATH = "dist/main.rbxm"

---The source that will be output to `SOURCE_PATH`.
local source = ""

---Minifies the given text by processing it through darklua.
---@param text string
---@return string
local function minify(text)
	remodel.writeFile(TEMP_FILE, text)

	os.execute("darklua process " .. TEMP_FILE .. " " .. TEMP_FILE .. " --config " .. DARKLUA_CONFIG)

	return remodel.readFile(TEMP_FILE)
end

---Declare a script in the source output.
---@param instance LocalScript | ModuleScript
local function declareScript(instance)
	local name = string.format("%q", instance.Name)
	local className = string.format("%q", instance.ClassName)
	local path = string.format("%q", instance:GetFullName())
	local parentPath = instance.Parent and string.format("%q", instance.Parent:GetFullName()) or "nil"

	local declaration = string.format("\n__lua(%s, %s, %s, %s, function()\n\t", name, className, path, parentPath)
	local globals = string.format("local _ = _G.__getGlobals(%s); local script, require = _.script, _.require; ", path)

	local script = globals .. remodel.getRawProperty(instance, "Source")

	if MODULE_TYPE == "callback" then
		declaration = declaration .. minify(script) .. "\nend)"
	elseif MODULE_TYPE == "loadstring" then
		script = string.format("%q", script)
		script = string.gsub(script, "\\\n", "\\n") -- escape newlines
		declaration = declaration .. string.format("return assert(loadstring(%s, %s))()\nend)", script, path)
	else
		error("Invalid module type: " .. MODULE_TYPE)
	end

	source = source .. declaration
end

---Declare a single Roblox instance in the source output. Does not set properties.
---@param instance Instance
local function declareInstance(instance)
	local name = string.format("%q", instance.Name)
	local className = string.format("%q", instance.ClassName)
	local path = string.format("%q", instance:GetFullName())
	local parentPath = instance.Parent and string.format("%q", instance.Parent:GetFullName()) or "nil"

	source = source .. string.format("\n__instance(%s, %s, %s, %s)", name, className, path, parentPath)
end

---Declare a Roblox instance and its descendants in the source output.
---@param instance Instance
local function declareDescendants(instance)
	if instance.ClassName == "LocalScript" or instance.ClassName == "ModuleScript" then
		declareScript(instance)
	else
		declareInstance(instance)
	end

	for _, child in ipairs(instance:GetChildren()) do
		declareDescendants(child)
	end
end

---Bundles the contents of the model file and appends it to the runtime library.
---Minifies the source if `ENV` is "production".
local function bundle()
	declareDescendants(remodel.readModelFile(MODEL_PATH)[1])

	local header = remodel.readFile("ci/include/header.lua")
	local runtime = remodel.readFile("ci/include/runtime.lua")

	source = source .. "\n\n__start()\n"

	if ENV == "production" then
		print("[CI] Minifying runtime")
		runtime = "-- Runtime library\n" .. minify(runtime) .. "\n"
	end

	source = header .. runtime .. "\n-- Generated by ci/bundle.lua" .. source

	remodel.writeFile(SOURCE_PATH, source)
end

bundle()
